package com.atrium.etiquetas;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.ResourceBundle;

import javax.servlet.jsp.JspException;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.SimpleTagSupport;

import com.atrium.hibernate.Tareas;
import com.atrium.hibernate.Usuarios;
import com.atrium.hibernate.ext.Tareas_Idioma;
import com.atrium.hibernate.modelo.IGestion_Usuarios;
import com.atrium.spring.Acceso_ApplicationContext;

/**
 * Etiqueta personalizada para la generacion dinamica del menu personalizado de
 * cada usuario que inicia la aplicacion.
 * 
 * @author Juan Antonio Solves Garcia
 * @version 2.0
 * @since 6-9-2013
 */
public class Menu_Personalizado extends SimpleTagSupport implements
		Comparator<Tareas_Idioma> {

	// PROPIEDAD PARA RECOGER EL ATRIBUTO DE LA ETIQUETA
	private boolean sentido;
	// COLECCION PARA IDIOMATIZAR LAS OPCIONES DE MENU
	private List<Tareas_Idioma> lista_tareas_traducidas;
	private ResourceBundle rb;
	private String idioma_elegido;

	@Override
	public void doTag() throws JspException, IOException {
		// RESOLVEMOS LA IDIOMATIZACION DEL MENU
		idioma_elegido = (String) this.getJspContext().getAttribute(
				"idioma_elegido", PageContext.SESSION_SCOPE);
		rb = ResourceBundle.getBundle(idioma_elegido);

		// RECOGEMOS LA LISTA DE TAREAS DE LA SESISON SI ES QUE ESTA
		lista_tareas_traducidas = (List<Tareas_Idioma>) this.getJspContext()
				.getAttribute("lista_tareas", PageContext.SESSION_SCOPE);

		if (lista_tareas_traducidas == null) {
			// RECOGEMOS EL USUARIO DE LA SESION
			Usuarios usuario = (Usuarios) this.getJspContext().getAttribute(
					"usuario", PageContext.SESSION_SCOPE);
			// PIDO LA FACHADA AL APPLICATION CONTEXT DE SPRING
			IGestion_Usuarios gestion_usuario = Acceso_ApplicationContext
					.getBean(IGestion_Usuarios.class);
			// REALIZO LA CONSULTA QUE ME RESUELVE LA CARGA VAGA DE HIBERNATE
			List<Tareas> lista_tareas = gestion_usuario
					.consultar_TareasUsuario(usuario);
			// CREAMOS POR PRIMERA VEZ LA COLECCION DE TAREAS TRADUCIDAS
			lista_tareas_traducidas = new ArrayList<Tareas_Idioma>();
			// CARGAMOS LA TRADUCCION DE LAS TAREAS
			Tareas_Idioma nueva_tarea_traducida;
			for (Tareas tarea : lista_tareas) {
				nueva_tarea_traducida = new Tareas_Idioma();
				// CARGAMOS LOS DATOS DE LA TAREA A LA TAREA TRADUCIDA
				nueva_tarea_traducida.setCodigoTarea(tarea.getCodigoTarea());
				nueva_tarea_traducida.setDescripcionTarea(tarea
						.getDescripcionTarea());
				nueva_tarea_traducida.setVinculo(tarea.getVinculo());
				// METEMOS LA TRADUCCION LEYENDO DEL PROPERTIES
				nueva_tarea_traducida.setTraduccion(rb.getString("menu.opcion."
						+ tarea.getDescripcionTarea().toLowerCase()
								.replace(" ", "")));
				// GUARDAMOS LA TAREA TRADUCIDA EN SU PROPIA COLECCION
				lista_tareas_traducidas.add(nueva_tarea_traducida);

			}
			// ORDENAMOS LA COLECCION POR LA TRADUCCION DEL TEXTO
			Collections.sort(lista_tareas_traducidas, this);
			// CARGAMOS LA LISTA DE TAREAS PARA QUE EN UNA NUEVA PETICION NO SE
			// REPITA EL PROCESO
			this.getJspContext().setAttribute("lista_tareas",
					lista_tareas_traducidas, PageContext.SESSION_SCOPE);
			this.getJspContext().setAttribute("idioma_anterior",
					idioma_elegido, PageContext.SESSION_SCOPE);
		}
		// GENERACION DEL HTML PARA LA PAGINA
		StringBuffer salida = new StringBuffer();
		String descripcion = "";
		// TRATO EL RESULTADO DE LA CONSULTA PARA CREAR EL HTML NECESARIO
		for (Tareas_Idioma tarea : lista_tareas_traducidas) {
			descripcion = tarea.getTraduccion();
			salida.append("\n<tr><td><a href='jsp/principal.jsp?tarea="
					+ tarea.getVinculo() + "'>" + descripcion
					+ "</a></td></tr>");
		}
		// ESCRIBO EL HTML EN LA PAGINA
		this.getJspContext().getOut().append(salida.toString());
	}

	/**
	 * Proceso de ordenacion de los textos, en el idioma seleccionado, de la
	 * coleccion para ser mostrados en el menu.
	 */
	@Override
	public int compare(Tareas_Idioma tarea1, Tareas_Idioma tarea2) {
		int comparacion = 0;
		if (new Boolean(isSentido())) {
			comparacion = tarea1.getTraduccion().compareTo(
					tarea2.getTraduccion());
		} else {
			comparacion = tarea2.getTraduccion().compareTo(
					tarea1.getTraduccion());
		}
		return comparacion;
	}

	// ACCESORES PARA LA INYECCION DE VALORES
	public boolean isSentido() {
		return sentido;
	}

	public void setSentido(boolean sentido) {
		this.sentido = sentido;
	}

}
